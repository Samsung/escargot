name: ES-Actions

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  RUNNER: tools/run-tests.py

jobs:
  clang_build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - name: Install Packages
      run: |
        sudo apt-get update
        sudo apt-get install ninja-build gcc-multilib g++-multilib
    - name: Build
      env:
        BUILD_OPTIONS: -DESCARGOT_HOST=linux -DESCARGOT_MODE=debug -DESCARGOT_OUTPUT=shell_test -GNinja
      run: |
        CC=clang CXX=clang++ cmake -H. -Bout/clang/x86 -DESCARGOT_ARCH=x86 $BUILD_OPTIONS
        CC=clang CXX=clang++ cmake -H. -Bout/clang/x64 -DESCARGOT_ARCH=x64 $BUILD_OPTIONS
        ninja -Cout/clang/x86
        ninja -Cout/clang/x64

  release_x64_test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        tc: ['octane', 'v8 chakracore spidermonkey', 'modifiedVendorTest jsc-stress sunspider-js regression-tests new-es intl']
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - uses: actions/setup-python@v2
      with:
        python-version: '2.7'
    - name: Install Packages
      run: |
        sudo apt-get update
        sudo apt-get install ninja-build gcc-multilib g++-multilib
    - name: Build x64
      env:
        BUILD_OPTIONS: -DESCARGOT_HOST=linux -DESCARGOT_ARCH=x64 -DESCARGOT_MODE=release -DESCARGOT_OUTPUT=shell_test -GNinja
      run: |
        cmake -H. -Bout/release/x64 $BUILD_OPTIONS
        ninja -Cout/release/x64
    - name: Run release-x64 test
      run: $RUNNER --arch=x86_64 --engine="$GITHUB_WORKSPACE/out/release/x64/escargot" ${{ matrix.tc }}

  debug_x64_test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - uses: actions/setup-python@v2
      with:
        python-version: '2.7'
    - name: Install Packages
      run: |
        sudo apt-get update
        sudo apt-get install ninja-build gcc-multilib g++-multilib
    - name: Build x64
      env:
        BUILD_OPTIONS: -DESCARGOT_HOST=linux -DESCARGOT_ARCH=x64 -DESCARGOT_MODE=debug -DESCARGOT_OUTPUT=shell_test -GNinja
      run: |
        cmake -H. -Bout/debug/x64 $BUILD_OPTIONS
        ninja -Cout/debug/x64
    - name: Run debug-x64 test
      run: $RUNNER --arch=x86_64 --engine="$GITHUB_WORKSPACE/out/debug/x64/escargot" modifiedVendorTest regression-tests new-es intl sunspider-js

  debugger_test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - uses: actions/setup-python@v2
      with:
        python-version: '2.7'
    - name: Install Packages
      run: sudo apt-get install ninja-build
    - name: Build
      env:
        BUILD_OPTIONS: -DESCARGOT_HOST=linux -DESCARGOT_ARCH=x64 -DESCARGOT_MODE=debug -DESCARGOT_DEBUGGER=1 -DESCARGOT_OUTPUT=shell_test -GNinja
      run: |
        cmake -H. -Bout/debugger $BUILD_OPTIONS
        ninja -Cout/debugger
    - name: Debugger Test
      run: |
        $RUNNER --arch=x86_64 --engine="$GITHUB_WORKSPACE/out/debugger/escargot" debugger-server-source
        $RUNNER --arch=x86_64 --engine="$GITHUB_WORKSPACE/out/debugger/escargot" debugger-client-source

  cctest:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - uses: actions/setup-python@v2
      with:
        python-version: '2.7'
    - name: Install Packages
      run: sudo apt-get install ninja-build
    - name: Build
      env:
        BUILD_OPTIONS: -DESCARGOT_HOST=linux -DESCARGOT_ARCH=x64 -DESCARGOT_MODE=debug -DESCARGOT_OUTPUT=cctest -GNinja
      run: |
        cmake -H. -Bout/cctest $BUILD_OPTIONS
        ninja -Cout/cctest
    - name: Run Test
      run: $RUNNER --arch=x86_64 --engine="$GITHUB_WORKSPACE/out/cctest/cctest" cctest

  codecache_test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - uses: actions/setup-python@v2
      with:
        python-version: '2.7'
    - name: Install Packages
      run: |
        sudo apt-get update
        sudo apt-get install ninja-build gcc-multilib g++-multilib
    - name: Install ICU
      run: |
        wget http://mirrors.kernel.org/ubuntu/pool/main/i/icu/libicu-dev_66.1-2ubuntu2_i386.deb
        dpkg -X libicu-dev_66.1-2ubuntu2_i386.deb $GITHUB_WORKSPACE/icu32
    - name: Build x86
      env:
        CXXFLAGS: -I$GITHUB_WORKSPACE/icu32/usr/include
        LDFLAGS: -L$GITHUB_WORKSPACE/icu32/usr/lib/i386-linux-gnu
        BUILD_OPTIONS: -DESCARGOT_HOST=linux -DESCARGOT_ARCH=x86 -DESCARGOT_MODE=debug -DESCARGOT_LIBICU_SUPPORT_WITH_DLOPEN=OFF -DESCARGOT_CODE_CACHE=ON -DESCARGOT_OUTPUT=shell_test -GNinja
      run: |
        cmake -H. -Bout/codecache/x86 $BUILD_OPTIONS
        ninja -Cout/codecache/x86
    - name: Build x64
      env:
        BUILD_OPTIONS: -DESCARGOT_HOST=linux -DESCARGOT_ARCH=x64 -DESCARGOT_MODE=debug -DESCARGOT_CODE_CACHE=ON -DESCARGOT_OUTPUT=shell_test -GNinja
      run: |
        cmake -H. -Bout/codecache/x64 $BUILD_OPTIONS
        ninja -Cout/codecache/x64
    - name: Run x86 test
      run: |
        $RUNNER --arch=x86 --engine="$GITHUB_WORKSPACE/out/codecache/x86/escargot" sunspider-js
        $RUNNER --arch=x86 --engine="$GITHUB_WORKSPACE/out/codecache/x86/escargot" sunspider-js
        $RUNNER --arch=x86 --engine="$GITHUB_WORKSPACE/out/codecache/x86/escargot" new-es
        $RUNNER --arch=x86 --engine="$GITHUB_WORKSPACE/out/codecache/x86/escargot" new-es
        $RUNNER --arch=x86 --engine="$GITHUB_WORKSPACE/out/codecache/x86/escargot" octane-loading
        $RUNNER --arch=x86 --engine="$GITHUB_WORKSPACE/out/codecache/x86/escargot" octane-loading
        rm -rf $HOME/Escargot-cache/
    - name: Run x64 test
      run: |
        $RUNNER --arch=x86_64 --engine="$GITHUB_WORKSPACE/out/codecache/x64/escargot" sunspider-js
        $RUNNER --arch=x86_64 --engine="$GITHUB_WORKSPACE/out/codecache/x64/escargot" sunspider-js
        $RUNNER --arch=x86_64 --engine="$GITHUB_WORKSPACE/out/codecache/x64/escargot" new-es
        $RUNNER --arch=x86_64 --engine="$GITHUB_WORKSPACE/out/codecache/x64/escargot" new-es
        $RUNNER --arch=x86_64 --engine="$GITHUB_WORKSPACE/out/codecache/x64/escargot" octane-loading
        $RUNNER --arch=x86_64 --engine="$GITHUB_WORKSPACE/out/codecache/x64/escargot" octane-loading
        rm -rf $HOME/Escargot-cache/
    - name: Handle error cases
      run: |
        $RUNNER --arch=x86_64 --engine="$GITHUB_WORKSPACE/out/codecache/x64/escargot" sunspider-js
        rm $HOME/Escargot-cache/3217641879501852439
        $RUNNER --arch=x86_64 --engine="$GITHUB_WORKSPACE/out/codecache/x64/escargot" sunspider-js
        ls -1q $HOME/Escargot-cache/ | wc -l
        $RUNNER --arch=x86_64 --engine="$GITHUB_WORKSPACE/out/codecache/x64/escargot" sunspider-js
        rm $HOME/Escargot-cache/cache_list
        $RUNNER --arch=x86_64 --engine="$GITHUB_WORKSPACE/out/codecache/x64/escargot" sunspider-js

  wasm_js_test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - uses: actions/setup-python@v2
      with:
        python-version: '2.7'
    - name: Install Packages
      run: |
        sudo apt-get update
        sudo apt-get install ninja-build gcc-multilib g++-multilib
    - name: Install ICU
      run: |
        wget http://mirrors.kernel.org/ubuntu/pool/main/i/icu/libicu-dev_66.1-2ubuntu2_i386.deb
        dpkg -X libicu-dev_66.1-2ubuntu2_i386.deb $GITHUB_WORKSPACE/icu32
    - name: Patch WABT
      working-directory: ./third_party/wasm/wabt
      run: |
        cp ../../../tools/test/wasm-js/wabt_patch .
        patch -p0 < wabt_patch
    - name: Build x86
      env:
        CXXFLAGS: -I$GITHUB_WORKSPACE/icu32/usr/include
        LDFLAGS: -L$GITHUB_WORKSPACE/icu32/usr/lib/i386-linux-gnu
        BUILD_OPTIONS: -DESCARGOT_HOST=linux -DESCARGOT_ARCH=x86 -DESCARGOT_MODE=debug -DESCARGOT_LIBICU_SUPPORT_WITH_DLOPEN=OFF -DESCARGOT_WASM=ON -DESCARGOT_OUTPUT=shell_test -GNinja
      run: |
        cmake -H. -Bout/wasm/x86 $BUILD_OPTIONS
        ninja -Cout/wasm/x86
    - name: Build x64
      env:
        BUILD_OPTIONS: -DESCARGOT_HOST=linux -DESCARGOT_ARCH=x64 -DESCARGOT_MODE=debug -DESCARGOT_WASM=ON -DESCARGOT_OUTPUT=shell_test -GNinja
      run: |
        cmake -H. -Bout/wasm/x64 $BUILD_OPTIONS
        ninja -Cout/wasm/x64
    - name: Run x86 test
      run: $RUNNER --arch=x86 --engine="$GITHUB_WORKSPACE/out/wasm/x86/escargot" wasm-js
    - name: Run x64 test
      run: $RUNNER --arch=x86_64 --engine="$GITHUB_WORKSPACE/out/wasm/x64/escargot" wasm-js

  wasm_spec_test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./third_party/wasm/wabt
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
    - name: Prepare Build
      run: |
        git fetch -t
        mkdir build
    - name: Build WABT
      working-directory: ./third_party/wasm/wabt/build
      run: |
        cmake ..
        cmake --build .
    - name: Run Spec Test
      run: sudo ./test/run-tests.py --bindir=./build test/spec/

  coverity_scan:
    if: ${{ github.repository == 'Samsung/escargot' && github.event_name == 'push' }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - name: Install Packages
      run: sudo apt-get install ninja-build
    - name: Patch WABT
      working-directory: ./third_party/wasm/wabt
      run: |
        cp ../../../tools/test/wasm-js/wabt_patch .
        patch -p0 < wabt_patch
    - name: Download Coverity Tool
      env:
        TOKEN: ${{ secrets.COVERITY_SCAN_TOKEN }}
      run: |
        wget -q https://scan.coverity.com/download/cxx/linux64 --post-data "token=$TOKEN&project=Samsung%2Fescargot" -O cov-analysis-linux64.tar.gz
        mkdir cov-analysis-linux64
        tar xzf cov-analysis-linux64.tar.gz --strip 1 -C cov-analysis-linux64
    - name: Build
      env:
        BUILD_OPTIONS: -DESCARGOT_HOST=linux -DESCARGOT_ARCH=x64 -DESCARGOT_MODE=release -DESCARGOT_CODE_CACHE=ON -DESCARGOT_WASM=ON -DESCARGOT_OUTPUT=shell_test -GNinja
      run: |
        export PATH=$GITHUB_WORKSPACE/cov-analysis-linux64/bin:$PATH
        cmake -H. -Bout/coverity_scan $BUILD_OPTIONS
        cov-build --dir cov-int ninja -Cout/coverity_scan
    - name: Submit
      env:
        TOKEN: ${{ secrets.COVERITY_SCAN_TOKEN }}
        NOTI_MAIL: ${{ secrets.COVERITY_SCAN_MAIL }}
      run: |
        tar czvf escargot.tgz cov-int
        curl \
          --form token=$TOKEN \
          --form email=$NOTI_MAIL \
          --form file=@escargot.tgz \
          --form version="3.0.0" \
          --form description="escargot coverity scan" \
          https://scan.coverity.com/builds?project=Samsung%2Fescargot

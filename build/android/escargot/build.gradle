plugins {
    id 'com.android.library'
    id 'jacoco'
    id 'maven-publish'
}

ext {
    force64Option = System.getProperty("ESCARGOT_BUILD_64BIT_FORCE_LARGE", "ON")
    pthreadKeyOption = System.getProperty("ESCARGOT_BUILD_TLS_ACCESS_BY_PTHREAD_KEY", "OFF")
}

android {
    namespace 'com.samsung.lwe.escargot'
    compileSdk 36
    ndkVersion '28.1.13356709'

    defaultConfig {
        minSdk 28
        targetSdk 36

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
        externalNativeBuild {
            cmake {
                arguments "-DANDROID_SUPPORT_FLEXIBLE_PAGE_SIZES=ON", "-DCMAKE_VERBOSE_MAKEFILE=ON", "-DESCARGOT_HOST=android", "-DESCARGOT_OUTPUT=static_lib", "-DENABLE_SHELL=OFF",
                        "-DESCARGOT_BUILD_64BIT_FORCE_LARGE="+project.ext.force64Option, "-DESCARGOT_TLS_ACCESS_BY_PTHREAD_KEY="+project.ext.pthreadKeyOption
            }
        }

        ndk {
            abiFilters "armeabi-v7a", "arm64-v8a", "x86", "x86_64"
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        debug {
            testCoverageEnabled true
            jniDebuggable = true
            ndk {
                debuggable = true
            }
        }

        debugShell {
            initWith(buildTypes.debug)
            externalNativeBuild {
                cmake {
                    arguments "-DCMAKE_VERBOSE_MAKEFILE=ON", "-DESCARGOT_HOST=android", "-DESCARGOT_OUTPUT=static_lib", "-DENABLE_SHELL=ON"
                }
            }
        }

        releaseShell {
            initWith(buildTypes.release)
            jniDebuggable = true
            ndk {
                debuggable = true
            }
            externalNativeBuild {
                cmake {
                    arguments "-DCMAKE_VERBOSE_MAKEFILE=ON", "-DESCARGOT_HOST=android", "-DESCARGOT_OUTPUT=static_lib", "-DENABLE_SHELL=ON"
                }
            }
        }
    }

    sourceSets {
        main.java.srcDirs('src/main/java')
        test {
            java.srcDir('src/androidTest/java')
        }
    }

    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
        }
    }

    ndkVersion '27.0.12077973'

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    publishing {
        singleVariant("release") {
            // if you don't want sources/javadoc, remove these lines
            withSourcesJar()
            withJavadocJar()
        }
    }
}

publishing {
    publications {
        release(MavenPublication) {
            afterEvaluate {
                from components.release
            }
            artifactId "escargot-android"
            groupId "com.samsung.lwe.escargot"
            version "X.X.X.20XXXXXX.X.XXXXXXXX"
        }
    }

    repositories {
        maven {
            url "/XXXXXX/android/releases/"
        }
    }
}

def dirForNativeNoNDK = project.layout.buildDirectory.get().dir("native_nondk")
def srcForNativeNoNDK = project.layout.projectDirectory.dir("src/main/cpp").asFile

task createNativeNoNDK() {
    def dstdir = dirForNativeNoNDK.asFile
    if (!dstdir.exists()) dstdir.mkdirs()
}
task buildCMakeNativeNoNDK(type: Exec) {
    dependsOn createNativeNoNDK
    workingDir dirForNativeNoNDK
    if (org.gradle.internal.os.OperatingSystem.current().isLinux()) {
        commandLine "/usr/bin/env", "cmake", "-DESCARGOT_HOST=linux", "-DESCARGOT_ARCH=x64", "-DESCARGOT_OUTPUT=static_lib", "-DUNDER_NDK=OFF", srcForNativeNoNDK.absolutePath
    } else if (org.gradle.internal.os.OperatingSystem.current().isMacOsX()) {
        var javaHome = new ByteArrayOutputStream().withStream { os ->
            exec {
                executable "/usr/libexec/java_home"
                args "-v", "1.8"
                standardOutput = os
            }
            os.toString().trim()
        }
        var icu4cPath = new ByteArrayOutputStream().withStream { os ->
            exec {
                commandLine "sh", "-c", "brew --prefix icu4c"
                standardOutput = os
            }
            os.toString().trim()
        }
        var pkgConfigPath = icu4cPath + "/lib/pkgconfig"
        environment("PKG_CONFIG_PATH", pkgConfigPath)
        commandLine "/usr/bin/env", "cmake", "-DESCARGOT_HOST=darwin", "-DESCARGOT_ARCH=x64", "-DESCARGOT_OUTPUT=static_lib", "-DUNDER_NDK=OFF",
                "-DESCARGOT_LIBICU_SUPPORT_WITH_DLOPEN=OFF",
                "-DJAVA_HOME=" + javaHome, "-DJAVA_INCLUDE_PATH=" + javaHome + "/include",
                "-DJAVA_INCLUDE_PATH2=" + javaHome + "/include/darwin", "-DJAVA_AWT_INCLUDE_PATH=" + javaHome + "/include",
                srcForNativeNoNDK.absolutePath
    } else {
        // TODO
    }
}

task buildGMakeNativeNoNDK(type: Exec) {
    dependsOn buildCMakeNativeNoNDK
    workingDir dirForNativeNoNDK
    commandLine "/usr/bin/env", "make", "-j" + Runtime.getRuntime().availableProcessors().toString();
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {
    reports {
        xml.required = true
        html.required = true
    }
    def mainSrc = "${project.projectDir}/src/main/java"
    sourceDirectories.setFrom(files([mainSrc]))

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*',
                      'android/**/*.*', '**/*Activity*.*']
    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
    classDirectories.setFrom(files([debugTree]))

    executionData.setFrom(fileTree(dir: "${buildDir}/jacoco/testDebugUnitTest.exec"))
}

project.afterEvaluate {
    if (org.gradle.internal.os.OperatingSystem.current().isLinux() || org.gradle.internal.os.OperatingSystem.current().isMacOsX()) {
        testDebugUnitTest {
            dependsOn buildGMakeNativeNoNDK
            systemProperty "java.library.path", dirForNativeNoNDK.asFile.absolutePath + ":" + System.getProperty("java.library.path")
        }
        testReleaseUnitTest {
            dependsOn buildGMakeNativeNoNDK
            systemProperty "java.library.path", dirForNativeNoNDK.asFile.absolutePath + ":" + System.getProperty("java.library.path")
        }

    }
}

task clearHostJar(type: Delete) {
    delete 'build/libs/escargot.jar'
}

task bundleHostJar(type: Jar) {
    dependsOn buildGMakeNativeNoNDK
    dependsOn assemble
    from(zipTree('build/intermediates/aar_main_jar/debug/classes.jar'))
    from(dirForNativeNoNDK.asFile.toString() + "/libescargot-jni.so")
    from(dirForNativeNoNDK.asFile.toString() + "/libescargot-jni.dylib")
    rename("libescargot-jni.dylib", "libescargot-jni.so")
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    archiveClassifier.set('sources')
    archivesBaseName = "escargot"
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.sourceFiles
    android.libraryVariants.all { variant ->
        if (variant.name == 'release') {
            owner.classpath += variant.javaCompileProvider.get().classpath
        }
    }
    options.memberLevel = JavadocMemberLevel.PRIVATE
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier.set('javadoc')
    archivesBaseName = "escargot"
    from javadoc.destinationDir
}

artifacts {
    sourcesJar
    javadocJar
}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.6.0'
    implementation 'com.google.android.material:material:1.7.0'
    testImplementation 'junit:junit:4.13.2'
    testImplementation project(path: ':escargot')
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    androidTestImplementation project(path: ':escargot')
}

CMAKE_MINIMUM_REQUIRED (VERSION 2.8)

# FLAGS
SET (ESCARGOT_CXXFLAGS)
SET (ESCARGOT_LDFLAGS)
SET (ESCARGOT_LIBRARIES)
SET (ESCARGOT_LIBDIRS)

SET (ESCARGOT_CXXFLAGS "${ESCARGOT_CXXFLAGS} ${ESCARGOT_CXXFLAGS_CONFIG}")
SET (ESCARGOT_CXXFLAGS "${ESCARGOT_CXXFLAGS} ${ESCARGOT_CXXFLAGS_COMMON}")
SET (ESCARGOT_CXXFLAGS "${ESCARGOT_CXXFLAGS} ${ESCARGOT_CXXFLAGS_THIRD_PARTY}")
SET (ESCARGOT_LDFLAGS "${ESCARGOT_LDFLAGS} ${ESCARGOT_LDFLAGS_CONFIG}")
SET (ESCARGOT_LDFLAGS "${ESCARGOT_LDFLAGS} ${ESCARGOT_LDFLAGS_COMMON}")

IF (${HOST} STREQUAL "linux")
    SET (ESCARGOT_CXXFLAGS "${ESCARGOT_CXXFLAGS} ${ESCARGOT_CXXFLAGS_LINUX}")
    SET (ESCARGOT_LDFLAGS "${ESCARGOT_LDFLAGS} ${ESCARGOT_LDFLAGS_LINUX}")
    SET (ESCARGOT_LIBRARIES ${ESCARGOT_LIBRARIES} ${ESCARGOT_LIBRARIES_LINUX})
    SET (ESCARGOT_LIBDIRS ${ESCARGOT_LIBDIRS} ${ESCARGOT_LIBDIRS_LINUX})
ELSEIF (${HOST} MATCHES "tizen")
    SET (ESCARGOT_CXXFLAGS "${ESCARGOT_CXXFLAGS} ${ESCARGOT_CXXFLAGS_TIZEN}")
    SET (ESCARGOT_LDFLAGS "${ESCARGOT_LDFLAGS} ${ESCARGOT_LDFLAGS_TIZEN}")
    SET (ESCARGOT_LIBRARIES ${ESCARGOT_LIBRARIES} ${ESCARGOT_LIBRARIES_TIZEN})
    SET (ESCARGOT_LIBDIRS ${ESCARGOT_LIBDIRS} ${ESCARGOT_LIBDIRS_TIZEN})
ELSEIF (${HOST} MATCHES "android")
    SET (ESCARGOT_CXXFLAGS "${ESCARGOT_CXXFLAGS} ${ESCARGOT_CXXFLAGS_ANDROID}")
    SET (ESCARGOT_LDFLAGS "${ESCARGOT_LDFLAGS} ${ESCARGOT_LDFLAGS_ANDROID}")
ENDIF()

IF (${ARCH} STREQUAL "x64")
    SET (ESCARGOT_CXXFLAGS "${ESCARGOT_CXXFLAGS} ${ESCARGOT_CXXFLAGS_X64}")
    SET (ESCARGOT_LDFLAGS "${ESCARGOT_LDFLAGS} ${ESCARGOT_LDFLAGS_X64}")
ELSEIF (${ARCH} STREQUAL "x86")
    SET (ESCARGOT_CXXFLAGS "${ESCARGOT_CXXFLAGS} ${ESCARGOT_CXXFLAGS_X86}")
    SET (ESCARGOT_LDFLAGS "${ESCARGOT_LDFLAGS} ${ESCARGOT_LDFLAGS_X86}")
ELSEIF (${ARCH} STREQUAL "arm")
    SET (ESCARGOT_CXXFLAGS "${ESCARGOT_CXXFLAGS} ${ESCARGOT_CXXFLAGS_ARM}")
    SET (ESCARGOT_LDFLAGS "${ESCARGOT_LDFLAGS} ${ESCARGOT_LDFLAGS_ARM}")
ENDIF()

IF (${MODE} STREQUAL "debug")
    SET (ESCARGOT_CXXFLAGS "${ESCARGOT_CXXFLAGS} ${ESCARGOT_CXXFLAGS_DEBUG}")
    SET (ESCARGOT_LDFLAGS "${ESCARGOT_LDFLAGS} ${ESCARGOT_LDFLAGS_DEBUG}")
ELSEIF (${MODE} STREQUAL "release")
    SET (ESCARGOT_CXXFLAGS "${ESCARGOT_CXXFLAGS} ${ESCARGOT_CXXFLAGS_RELEASE}")
    SET (ESCARGOT_LDFLAGS "${ESCARGOT_LDFLAGS} ${ESCARGOT_LDFLAGS_RELEASE}")
ENDIF()

IF (${OUTPUT} STREQUAL "bin")
    SET (ESCARGOT_CXXFLAGS "${ESCARGOT_CXXFLAGS} ${ESCARGOT_CXXFLAGS_BIN}")
    SET (ESCARGOT_LDFLAGS "${ESCARGOT_LDFLAGS} ${ESCARGOT_LDFLAGS_BIN}")
ELSEIF (${OUTPUT} STREQUAL "shared_lib")
    SET (ESCARGOT_CXXFLAGS "${ESCARGOT_CXXFLAGS} ${ESCARGOT_CXXFLAGS_SHAREDLIB}")
    SET (ESCARGOT_LDFLAGS "${ESCARGOT_LDFLAGS} ${ESCARGOT_LDFLAGS_SHAREDLIB}")
ELSEIF (${OUTPUT} STREQUAL "static_lib")
    SET (ESCARGOT_CXXFLAGS "${ESCARGOT_CXXFLAGS} ${ESCARGOT_CXXFLAGS_STATICLIB}")
    SET (ESCARGOT_LDFLAGS "${ESCARGOT_LDFLAGS} ${ESCARGOT_LDFLAGS_STATICLIB}")
ENDIF()

IF ("${LTO}" EQUAL 1)
    SET (ESCARGOT_CXXFLAGS "${ESCARGOT_CXXFLAGS} ${ESCARGOT_CXXFLAGS_LTO}")
    SET (ESCARGOT_LDFLAGS "${ESCARGOT_LDFLAGS} ${ESCARGOT_LDFLAGS_LTO}")
    IF (${OUTPUT} STREQUAL "bin")
        SET (ESCARGOT_LDFLAGS "${ESCARGOT_LDFLAGS} ${ESCARGOT_CXXFLAGS}")
    ENDIF()
ENDIF()

IF ("${VENDORTEST}" EQUAL 1)
    SET (ESCARGOT_CXXFLAGS "${ESCARGOT_CXXFLAGS} ${ESCARGOT_CXXFLAGS_VENDORTEST}")
ENDIF()


# SOURCE FILES
FILE (GLOB SRC_API_LIST ${ESCARGOT_ROOT}/src/api/*.cpp)
FILE (GLOB SRC_HEAP_LIST ${ESCARGOT_ROOT}/src/heap/*.cpp)
FILE (GLOB SRC_INTERPRETER_LIST ${ESCARGOT_ROOT}/src/interpreter/*.cpp)
FILE (GLOB SRC_PARSER_LIST ${ESCARGOT_ROOT}/src/parser/*.cpp)
FILE (GLOB SRC_PARSER_AST_LIST ${ESCARGOT_ROOT}/src/parser/ast/*.cpp)
FILE (GLOB SRC_PARSER_ESPRIMA_LIST ${ESCARGOT_ROOT}/src/parser/esprima_cpp/*.cpp)
FILE (GLOB SRC_RUNTIME_LIST ${ESCARGOT_ROOT}/src/runtime/*.cpp)
FILE (GLOB SRC_UTIL_LIST ${ESCARGOT_ROOT}/src/util/*.cpp)

FILE (GLOB YARR_LIST ${THIRD_PARTY_ROOT}/yarr/*.cpp)
FILE (GLOB DOUBLE_CONVERSION_LIST ${THIRD_PARTY_ROOT}/double_conversion/*.cc)
FILE (GLOB GCUTIL_LIST ${GCUTIL_ROOT}/*.cpp)

SET (SRC ${SRC_API_LIST} ${SRC_HEAP_LIST} ${SRC_INTERPRETER_LIST} 
     ${SRC_PARSER_LIST} ${SRC_PARSER_AST_LIST} ${SRC_PARSER_ESPRIMA_LIST} 
     ${SRC_RUNTIME_LIST} ${SRC_UTIL_LIST} ${YARR_LIST} 
     ${DOUBLE_CONVERSION_LIST} ${GCUTIL_LIST})

IF (${OUTPUT} STREQUAL "bin")
    FILE (GLOB SRC_SHELL_LIST ${ESCARGOT_ROOT}/src/shell/*.cpp) 
    SET (SRC ${SRC} ${SRC_SHELL_LIST})
ENDIF()


# GC LIBRARY (static)
SET (GC_LIB gc)
SET (GC_DEFINITIONS_COMMON -DHAVE_CONFIG_H -DESCARGOT -DIGNORE_DYNAMIC_LOADING -DGC_DONT_REGISTER_MAIN_STATIC_DATA)
IF (${MODE} STREQUAL "debug")
    SET (GC_DEFINITIONS_MODE -DGC_DEBUG)
ENDIF()
SET (GC_DEFINITIONS
    ${GC_DEFINITIONS_COMMON}
    ${GC_DEFINITIONS_MODE}
)

SET (GC_CFLAGS_COMMON -g3 -fdata-sections -ffunction-sections)
MESSAGE (${GC_CFLAGS_COMMON})

IF (${ARCH} STREQUAL "x86")
    SET (GC_CFLAGS_ARCH -m32)
    SET (GC_LDFLAGS_ARCH -m32)
ELSEIF (${ARCH} STREQUAL "tizen")
    SET (GC_CFLAGS_ARCH -march=armv7-a -mthumb -finline-limit=64)
ENDIF()

IF (${MODE} STREQUAL "debug")
    SET (GC_CFLAGS_MODE -O0)
ELSE()
    SET (GC_CFLAGS_MODE -O2)
ENDIF()

SET (GC_CFLAGS
    ${GC_CFLAGS_COMMON}
    ${GC_CFLAGS_ARCH}
    ${GC_CFLAGS_MODE}
)

SET (GC_CONFFLAGS_COMMON --enable-munmap --disable-parallel-mark --enable-large-config --disable-pthread --disable-threads)
IF (${MODE} STREQUAL "debug")
    SET (GC_CONFFLAGS_MODE --enable-debug --enable-gc-debug)
ELSE()
    SET (GC_CONFFLAGS_MODE --disable-debug --disable-gc-debug)
ENDIF()
SET (GC_CONFFLAGS
    ${GC_CONFFLAGS_COMMON}
    ${GC_CONFFLAGS_MODE}
)

SET (GC_SRC
    ${GCUTIL_ROOT}/bdwgc/allchblk.c
    ${GCUTIL_ROOT}/bdwgc/alloc.c
    ${GCUTIL_ROOT}/bdwgc/backgraph.c
    ${GCUTIL_ROOT}/bdwgc/blacklst.c
    ${GCUTIL_ROOT}/bdwgc/checksums.c
    #${GCUTIL_ROOT}/bdwgc/darwin_stop_world.c
    ${GCUTIL_ROOT}/bdwgc/dbg_mlc.c
    ${GCUTIL_ROOT}/bdwgc/dyn_load.c
    ${GCUTIL_ROOT}/bdwgc/finalize.c
    ${GCUTIL_ROOT}/bdwgc/fnlz_mlc.c
    #${GCUTIL_ROOT}/bdwgc/gc_cpp.cc
    ${GCUTIL_ROOT}/bdwgc/gc_dlopen.c
    ${GCUTIL_ROOT}/bdwgc/gcj_mlc.c
    ${GCUTIL_ROOT}/bdwgc/headers.c
    ${GCUTIL_ROOT}/bdwgc/mach_dep.c
    ${GCUTIL_ROOT}/bdwgc/malloc.c
    ${GCUTIL_ROOT}/bdwgc/mallocx.c
    ${GCUTIL_ROOT}/bdwgc/mark.c
    ${GCUTIL_ROOT}/bdwgc/mark_rts.c
    ${GCUTIL_ROOT}/bdwgc/misc.c
    ${GCUTIL_ROOT}/bdwgc/new_hblk.c
    ${GCUTIL_ROOT}/bdwgc/obj_map.c
    ${GCUTIL_ROOT}/bdwgc/os_dep.c
    #${GCUTIL_ROOT}/bdwgc/pthread_start.c
    #${GCUTIL_ROOT}/bdwgc/pthread_stop_world.c
    #${GCUTIL_ROOT}/bdwgc/pthread_support.c
    ${GCUTIL_ROOT}/bdwgc/pcr_interface.c
    ${GCUTIL_ROOT}/bdwgc/ptr_chck.c
    ${GCUTIL_ROOT}/bdwgc/real_malloc.c
    ${GCUTIL_ROOT}/bdwgc/reclaim.c
    #${GCUTIL_ROOT}/bdwgc/sparc_mach_dep.S
    ${GCUTIL_ROOT}/bdwgc/specific.c
    ${GCUTIL_ROOT}/bdwgc/stubborn.c
    ${GCUTIL_ROOT}/bdwgc/thread_local_alloc.c
    ${GCUTIL_ROOT}/bdwgc/typd_mlc.c 
    #${GCUTIL_ROOT}/bdwgc/win32_threads.c 
    ${GCUTIL_ROOT}/bdwgc/cord/cordbscs.c
    ${GCUTIL_ROOT}/bdwgc/cord/cordprnt.c
    ${GCUTIL_ROOT}/bdwgc/cord/cordxtra.c
)

SET (GC_BUILDDIR ${GCUTIL_ROOT}/bdwgc/out/${HOST}/${ARCH}/${MODE}.static) 

ADD_CUSTOM_TARGET (GC_PRECONF
        WORKING_DIRECTORY ${GCUTIL_ROOT}/bdwgc
        COMMAND autoreconf -vif
        COMMAND automake --add-missing
        COMMAND ${CMAKE_COMMAND} -E make_directory ${GC_BUILDDIR}
)

ADD_CUSTOM_TARGET (GC_CONF
        WORKING_DIRECTORY ${GC_BUILDDIR}
        DEPENDS GC_PRECONF
        COMMAND ../../../../configure ${GC_CONFFLAGS} CFLAGS="${GC_CFLAGS}" LDFLAGS="${GC_LDFLAGS}"
)

ADD_LIBRARY (${GC_LIB} STATIC ${GC_SRC})
TARGET_INCLUDE_DIRECTORIES (${GC_LIB} PUBLIC ${GCUTIL_ROOT}/bdwgc/include/ ${GC_BUILDDIR}/include/)
TARGET_COMPILE_DEFINITIONS (${GC_LIB} PUBLIC ${GC_DEFINITIONS})
TARGET_COMPILE_OPTIONS (${GC_LIB} PUBLIC ${GC_CFLAGS})
ADD_DEPENDENCIES (${GC_LIB} GC_CONF)


# BUILD
IF (${OUTPUT} STREQUAL "bin")
    ADD_EXECUTABLE (${ESCARGOT_TARGET} ${SRC})
    ADD_DEPENDENCIES (${ESCARGOT_TARGET} ${GC_LIB})

    TARGET_LINK_LIBRARIES (${ESCARGOT_TARGET} ${ESCARGOT_LIBRARIES} ${GC_LIB})
    TARGET_INCLUDE_DIRECTORIES (${ESCARGOT_TARGET} PUBLIC ${ESCARGOT_LIBDIRS})
    SET_TARGET_PROPERTIES (${ESCARGOT_TARGET} PROPERTIES 
                           COMPILE_FLAGS "${ESCARGOT_CXXFLAGS}" 
                           LINK_FLAGS "${ESCARGOT_LDFLAGS}") 

    ADD_CUSTOM_COMMAND (TARGET ${ESCARGOT_TARGET} PRE_BUILD
                        COMMAND @make tidy)
    ADD_CUSTOM_COMMAND (TARGET ${ESCARGOT_TARGET} POST_BUILD
                        COMMAND @cp ${OUTDIR}/${ESCARGOT_TARGET} .)

ELSEIF (${OUTPUT} STREQUAL "shared_lib")
    ADD_LIBRARY (${ESCARGOT_TARGET} SHARED ${SRC})
    SET_TARGET_PROPERTIES (${ESCARGOT_TARGET} PROPERTIES 
                           COMPILE_FLAGS "${ESCARGOT_CXXFLAGS}" 
                           LINK_FLAGS "${ESCARGOT_LDFLAGS}") 
ELSEIF (${OUTPUT} STREQUAL "static_lib")
    ADD_LIBRARY (${ESCARGOT_TARGET} STATIC ${SRC})
    SET_TARGET_PROPERTIES (${ESCARGOT_TARGET} PROPERTIES 
                           COMPILE_FLAGS "${ESCARGOT_CXXFLAGS}" 
                           LINK_FLAGS "${ESCARGOT_LDFLAGS}") 
ENDIF()


# CUSTOM TARGET for Pando
ADD_CUSTOM_TARGET (install_header_to_include
                   COMMENT "install_header_to_include"
                   COMMAND @cp -f ${ESCARGOT_ROOT}/src/api/EscargotPublic.h ${ESCARGOT_ROOT}/include/.
                   COMMAND @cp -f ${GCUTIL_ROOT}/GCUtil.h ${ESCARGOT_ROOT}/include/.
                   COMMAND @cp -f ${GCUTIL_ROOT}/Allocator.h ${ESCARGOT_ROOT}/include/.
                   COMMAND @cp -f ${GCUTIL_ROOT}/LeakChecker.h ${ESCARGOT_ROOT}/include/.
                   COMMAND @cp -f ${GCUTIL_ROOT}/bdwgc/include/gc.h ${ESCARGOT_ROOT}/include/.
                   COMMAND @cp -f ${GCUTIL_ROOT}/bdwgc/include/gc_mark.h ${ESCARGOT_ROOT}/include/.
                   COMMAND @cp -f ${GCUTIL_ROOT}/bdwgc/include/gc_typed.h ${ESCARGOT_ROOT}/include/.
                   COMMAND @cp -f ${GCUTIL_ROOT}/bdwgc/include/gc_allocator.h ${ESCARGOT_ROOT}/include/.
                   COMMAND @cp -f ${GCUTIL_ROOT}/bdwgc/include/gc_cpp.h ${ESCARGOT_ROOT}/include/.
                   COMMAND @cp -f ${GCUTIL_ROOT}/bdwgc/include/gc_version.h ${ESCARGOT_ROOT}/include/.
                   COMMAND @cp -f ${GCUTIL_ROOT}/bdwgc/include/gc_config_macros.h ${ESCARGOT_ROOT}/include/.
                  )
